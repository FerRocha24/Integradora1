name: Build and Analyze

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build, Test and Analyze
    runs-on: ubuntu-latest

    steps:
      # 1. Clona el repositorio con historial completo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Instala dependencias necesarias
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ lcov gcovr

      # 3. Configura el proyecto con flags de cobertura
      - name: Configure CMake
        run: |
          rm -rf build
          rm -f CMakeCache.txt
          cmake -S . -B build -DENABLE_TESTING=ON -DENABLE_COVERAGE=ON

      # 4. Compila el código y pruebas
      - name: Build
        run: |
          cmake --build build

      # 5. Ejecuta pruebas
      - name: Run Unit Tests
        run: |
          cd build
          ctest --output-on-failure

      # 6. Genera reporte de cobertura en formato Cobertura
      - name: Generate Coverage Report
        run: |
          gcovr -r . --cobertura -o build/coverage.xml --exclude test/test/ --exclude main.cpp --print-summary

      # 7. Ejecuta análisis con SonarQube
      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # 8. (Opcional) Verifica el Quality Gate
      # - name: Check SonarQube Quality Gate
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
